=begin
#@ledge/external-api

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'date'
require 'time'

module LedgeApiClient
  # Model User
  class User
    attr_accessor :last_login

    attr_accessor :verified

    attr_accessor :merged_with

    attr_accessor :game_id

    attr_accessor :external_id

    attr_accessor :referred_by_id

    attr_accessor :enable_notifications

    attr_accessor :has_accepted_legal

    attr_accessor :has_onboarded

    attr_accessor :gender

    attr_accessor :birth_year

    attr_accessor :avatar

    attr_accessor :remaining_referrals

    attr_accessor :code

    attr_accessor :usertag

    attr_accessor :username

    attr_accessor :name

    attr_accessor :phone_number

    attr_accessor :email

    attr_accessor :updated_at

    attr_accessor :created_at

    attr_accessor :id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'last_login' => :'lastLogin',
        :'verified' => :'verified',
        :'merged_with' => :'mergedWith',
        :'game_id' => :'gameId',
        :'external_id' => :'externalId',
        :'referred_by_id' => :'referredById',
        :'enable_notifications' => :'enableNotifications',
        :'has_accepted_legal' => :'hasAcceptedLegal',
        :'has_onboarded' => :'hasOnboarded',
        :'gender' => :'gender',
        :'birth_year' => :'birthYear',
        :'avatar' => :'avatar',
        :'remaining_referrals' => :'remainingReferrals',
        :'code' => :'code',
        :'usertag' => :'usertag',
        :'username' => :'username',
        :'name' => :'name',
        :'phone_number' => :'phoneNumber',
        :'email' => :'email',
        :'updated_at' => :'updatedAt',
        :'created_at' => :'createdAt',
        :'id' => :'id'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'last_login' => :'Time',
        :'verified' => :'Boolean',
        :'merged_with' => :'String',
        :'game_id' => :'String',
        :'external_id' => :'String',
        :'referred_by_id' => :'String',
        :'enable_notifications' => :'Boolean',
        :'has_accepted_legal' => :'Boolean',
        :'has_onboarded' => :'Boolean',
        :'gender' => :'Gender',
        :'birth_year' => :'Float',
        :'avatar' => :'String',
        :'remaining_referrals' => :'Float',
        :'code' => :'String',
        :'usertag' => :'Float',
        :'username' => :'String',
        :'name' => :'String',
        :'phone_number' => :'String',
        :'email' => :'String',
        :'updated_at' => :'Time',
        :'created_at' => :'Time',
        :'id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'last_login',
        :'merged_with',
        :'game_id',
        :'external_id',
        :'referred_by_id',
        :'phone_number',
        :'email',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `LedgeApiClient::User` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `LedgeApiClient::User`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'last_login')
        self.last_login = attributes[:'last_login']
      else
        self.last_login = nil
      end

      if attributes.key?(:'verified')
        self.verified = attributes[:'verified']
      else
        self.verified = nil
      end

      if attributes.key?(:'merged_with')
        self.merged_with = attributes[:'merged_with']
      else
        self.merged_with = nil
      end

      if attributes.key?(:'game_id')
        self.game_id = attributes[:'game_id']
      else
        self.game_id = nil
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      else
        self.external_id = nil
      end

      if attributes.key?(:'referred_by_id')
        self.referred_by_id = attributes[:'referred_by_id']
      else
        self.referred_by_id = nil
      end

      if attributes.key?(:'enable_notifications')
        self.enable_notifications = attributes[:'enable_notifications']
      else
        self.enable_notifications = nil
      end

      if attributes.key?(:'has_accepted_legal')
        self.has_accepted_legal = attributes[:'has_accepted_legal']
      else
        self.has_accepted_legal = nil
      end

      if attributes.key?(:'has_onboarded')
        self.has_onboarded = attributes[:'has_onboarded']
      else
        self.has_onboarded = nil
      end

      if attributes.key?(:'gender')
        self.gender = attributes[:'gender']
      else
        self.gender = nil
      end

      if attributes.key?(:'birth_year')
        self.birth_year = attributes[:'birth_year']
      else
        self.birth_year = nil
      end

      if attributes.key?(:'avatar')
        self.avatar = attributes[:'avatar']
      else
        self.avatar = nil
      end

      if attributes.key?(:'remaining_referrals')
        self.remaining_referrals = attributes[:'remaining_referrals']
      else
        self.remaining_referrals = nil
      end

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      else
        self.code = nil
      end

      if attributes.key?(:'usertag')
        self.usertag = attributes[:'usertag']
      else
        self.usertag = nil
      end

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      else
        self.username = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'phone_number')
        self.phone_number = attributes[:'phone_number']
      else
        self.phone_number = nil
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      else
        self.email = nil
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      else
        self.updated_at = nil
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @verified.nil?
        invalid_properties.push('invalid value for "verified", verified cannot be nil.')
      end

      if @enable_notifications.nil?
        invalid_properties.push('invalid value for "enable_notifications", enable_notifications cannot be nil.')
      end

      if @has_accepted_legal.nil?
        invalid_properties.push('invalid value for "has_accepted_legal", has_accepted_legal cannot be nil.')
      end

      if @has_onboarded.nil?
        invalid_properties.push('invalid value for "has_onboarded", has_onboarded cannot be nil.')
      end

      if @gender.nil?
        invalid_properties.push('invalid value for "gender", gender cannot be nil.')
      end

      if @birth_year.nil?
        invalid_properties.push('invalid value for "birth_year", birth_year cannot be nil.')
      end

      if @avatar.nil?
        invalid_properties.push('invalid value for "avatar", avatar cannot be nil.')
      end

      if @remaining_referrals.nil?
        invalid_properties.push('invalid value for "remaining_referrals", remaining_referrals cannot be nil.')
      end

      if @code.nil?
        invalid_properties.push('invalid value for "code", code cannot be nil.')
      end

      if @usertag.nil?
        invalid_properties.push('invalid value for "usertag", usertag cannot be nil.')
      end

      if @username.nil?
        invalid_properties.push('invalid value for "username", username cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @verified.nil?
      return false if @enable_notifications.nil?
      return false if @has_accepted_legal.nil?
      return false if @has_onboarded.nil?
      return false if @gender.nil?
      return false if @birth_year.nil?
      return false if @avatar.nil?
      return false if @remaining_referrals.nil?
      return false if @code.nil?
      return false if @usertag.nil?
      return false if @username.nil?
      return false if @name.nil?
      return false if @updated_at.nil?
      return false if @created_at.nil?
      return false if @id.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          last_login == o.last_login &&
          verified == o.verified &&
          merged_with == o.merged_with &&
          game_id == o.game_id &&
          external_id == o.external_id &&
          referred_by_id == o.referred_by_id &&
          enable_notifications == o.enable_notifications &&
          has_accepted_legal == o.has_accepted_legal &&
          has_onboarded == o.has_onboarded &&
          gender == o.gender &&
          birth_year == o.birth_year &&
          avatar == o.avatar &&
          remaining_referrals == o.remaining_referrals &&
          code == o.code &&
          usertag == o.usertag &&
          username == o.username &&
          name == o.name &&
          phone_number == o.phone_number &&
          email == o.email &&
          updated_at == o.updated_at &&
          created_at == o.created_at &&
          id == o.id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [last_login, verified, merged_with, game_id, external_id, referred_by_id, enable_notifications, has_accepted_legal, has_onboarded, gender, birth_year, avatar, remaining_referrals, code, usertag, username, name, phone_number, email, updated_at, created_at, id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = LedgeApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
